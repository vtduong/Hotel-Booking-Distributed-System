package vspackage.RemoteMethodApp;


/**
* RemoteMethodApp/RemoteMethodPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from C:/Users/vanduong/Desktop/Concordia University/Courses/Distributed Systems/workspace/Corba/src/RemoteMethod.idl
* Thursday, July 11, 2019 3:51:30 PM EDT
*/

public abstract class RemoteMethodPOA extends org.omg.PortableServer.Servant
 implements vspackage.RemoteMethodApp.RemoteMethodOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("addEvent", new java.lang.Integer (0));
    _methods.put ("removeEvent", new java.lang.Integer (1));
    _methods.put ("listEventAvailability", new java.lang.Integer (2));
    _methods.put ("bookEvent", new java.lang.Integer (3));
    _methods.put ("getBookingSchedule", new java.lang.Integer (4));
    _methods.put ("cancelEvent", new java.lang.Integer (5));
    _methods.put ("swapEvent", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // RemoteMethodApp/RemoteMethod/addEvent
       {
         try {
           String eventID = in.read_string ();
           String eventType = in.read_string ();
           int bookingCapacity = in.read_long ();
           String $result = null;
           $result = this.addEvent (eventID, eventType, bookingCapacity);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.IOException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.IOExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // RemoteMethodApp/RemoteMethod/removeEvent
       {
         try {
           String eventID = in.read_string ();
           String eventType = in.read_string ();
           String $result = null;
           $result = this.removeEvent (eventID, eventType);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.SecurityException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.SecurityExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.IOException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.IOExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // RemoteMethodApp/RemoteMethod/listEventAvailability
       {
         try {
           String eventType = in.read_string ();
           String $result = null;
           $result = this.listEventAvailability (eventType);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.IOException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.IOExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.NoSuchFieldException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.NoSuchFieldExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // RemoteMethodApp/RemoteMethod/bookEvent
       {
         try {
           String customerID = in.read_string ();
           String eventID = in.read_string ();
           String eventType = in.read_string ();
           String $result = null;
           $result = this.bookEvent (customerID, eventID, eventType);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.IllegalArgumentException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.IllegalArgumentExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.IOException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.IOExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // RemoteMethodApp/RemoteMethod/getBookingSchedule
       {
         try {
           String customerID = in.read_string ();
           String $result = null;
           $result = this.getBookingSchedule (customerID);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.IOException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.IOExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // RemoteMethodApp/RemoteMethod/cancelEvent
       {
         try {
           String customerID = in.read_string ();
           String eventID = in.read_string ();
           String eventType = in.read_string ();
           String $result = null;
           $result = this.cancelEvent (customerID, eventID, eventType);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.IOException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.IOExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // RemoteMethodApp/RemoteMethod/swapEvent
       {
         try {
           String customerID = in.read_string ();
           String newEventID = in.read_string ();
           String newEventType = in.read_string ();
           String oldEventID = in.read_string ();
           String oldEventType = in.read_string ();
           String $result = null;
           $result = this.swapEvent (customerID, newEventID, newEventType, oldEventID, oldEventType);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.RemoteExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.AccessDeniedExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.ClassNotFoundExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.IOException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.IOExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.NoSuchFieldException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.NoSuchFieldExceptionHelper.write (out, $ex);
         } catch (vspackage.RemoteMethodApp.RemoteMethodPackage.IllegalArgumentException $ex) {
           out = $rh.createExceptionReply ();
           vspackage.RemoteMethodApp.RemoteMethodPackage.IllegalArgumentExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:RemoteMethodApp/RemoteMethod:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public RemoteMethod _this() 
  {
    return RemoteMethodHelper.narrow(
    super._this_object());
  }

  public RemoteMethod _this(org.omg.CORBA.ORB orb) 
  {
    return RemoteMethodHelper.narrow(
    super._this_object(orb));
  }


} // class RemoteMethodPOA
